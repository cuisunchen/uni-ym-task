<template>
	<div class="goodsHome flex1" :style="{'padding-bottom': (statusBarHeight+44)+'px'}">
		<div class="header">
			<div class="statusBar" :style="{height:statusBarHeight+'px'}"></div>  
			<div class="info row all-center">
				<text class="navTitleTxt">首页</text>
				<view class="iconBox row all-center" @click="goSearch">
					<uni-icons class="search" type="search" color="#fff" size="22"></uni-icons>
				</view>
			</div>    
		</div>
		<list class="goodsHome flex1 flex-column" :style="{'top':(statusBarHeight + 43) +'px'}" show-scrollbar="false">
			<refresh class="row fresh all-center" @refresh="onrefresh" @pullingdown="onpullingdown" :display="refreshing?'show':'hide'">
				<image class="loadingImg" v-if="!loadingStatus" src="../../../static/loading.gif" mode=""></image>
				<view class="loadingIco row align-center"> 
					<uni-icons class="uni-icons" v-if="loadingStatus" :class="{'refreshRotate': release}" type="pulldown" size="24" color="#999"></uni-icons>
					<view class="freshWrap flex-column all-center">
						<text class="freshTit">{{refreshText}}</text>
						<!-- <text class="freshTime">最后更新: 今天15:39</text> -->
					</view>
				</view>
			</refresh>
			<cell class="page-swiper">
				<swiper class="swiper" :indicator-dots="indicatorDots" :autoplay="autoplay" :interval="interval" :duration="duration">
					<swiper-item v-for="(item,index) in bannerList" :key="index" @click="goDetail(item)">
						<image class="swiperImg" :src="item.topImg" mode="widthFix"></image>
					</swiper-item>
				</swiper>	
			</cell>
			<cell>
				<bar class="bar flex-shrink" @click="barClick"></bar>
			</cell>
			
			<template class="wrap" v-for="(item,index) in goodsList"+>
				<header class="listTit row align-center flex-between">
					<view class="titWrap row align-center flex-between">
						<view class="leftBox row align-center">
							<text class="label">{{item.title}}</text> 
							<text class="line">丨</text> 
							<text class="nums">红包奖励概率: {{index == 0 ? 50 : index == 1 ? 70 : index == 2 ? 85 : 90}}%</text>
						</view>
						<view class="rightBox row align-center" @click="goWatchMorePage(index)">
							<text class="more">查看更多</text>
							<uni-icons type="arrowright" color="#666" size="16"></uni-icons>
						</view>
					</view>
				</header>
				<cell class="listsWrap">
					<view class="cardWrap" v-for="list in item.subList">
						<goods-card @click="cardClick(list)" :data-obj="list"></goods-card>
					</view>
				</cell>
				<cell v-if="index !== goodsList.length-1"><view class="emptyBox"></view></cell>
			</template>
		</list>
		
		<view class="dialog row all-center" v-if="showUpdate" @touchmove.stop.prevent="moveHandle">
			<view class="updateConBox flex-column">
				<view class="title row all-center">提示</view>
				<view class="updateCon row all-center">
					<text class="updateTxt">发现新的版本，请点击升级</text>
				</view>
				<view class="progress-box flex1" ref="progressBox" id="progressBox">
					<view class="progress" :style="{width: baifen/100*updateBoxWidth + 'px'}"></view>
				</view>
				<view class="updateBtns row">
					<view class="confirmbtn flex1 row all-center" @click="downloadBtn"><text class="btnTxt">立即升级</text></view>
				</view>
			</view>
		</view>
	</div>
</template>

<script>
	import bar from './bar.vue'
	import {unencryp,request} from '../../../common/utils/request.js'
	import goodsCard from '@/components/goods-card/goods-card.nvue'
	import mUpdateAppTip from '@/components/maozai-update/updateAppTip.vue'
	import myUpdate from '@/components/myUpdate.nvue'
	export default {
		components:{bar,goodsCard,mUpdateAppTip,myUpdate},
		data(){
			return{
				show:true,
				loadingStatus: true,   //  控制雪花动画是否显示
				refreshing:false,				//  控制refresh是否显示
				refreshText: "下拉可以刷新",
				loading:false,
				bannerList: [],
				goodsList:[],
				release:false,
				isUpdateShow:false,  //  是否显示升级框
				version: '',
				update_url:'',
				
				titleNView: null,
				statusBarHeight: '' ,
				showUpdate: false,
				updating: false,
				
				totalSize: 0,
				baifen: 0,
				fileSizeString:'',
				updateBoxWidth:null
			}
		},
		onLoad() {
			plus.runtime.getProperty(plus.runtime.appid, widgetInfo => {
				this.version = widgetInfo.version;
				this.getCheckVersion()
			});
		},
		onShow(){
			setTimeout(() => { //获取状态栏高度，setTimeout后才能调用uni.
				uni.getSystemInfo({     
					success: (res) => {    
						this.statusBarHeight = res.statusBarHeight; 
					}    
				});    
			}, 1);
			uni.$on('send', e =>{
				this.$set(this.questions,e.index,e.data)
			})
			let userInfo = uni.getStorageSync('userInfo')
			if(!userInfo){
				return
			}
			uni.showLoading({
				title:'加载中' 
			})
			this.getGoodsList()  
		},
		methods:{
			downloadBtn() {
				let	task=plus.downloader.createDownload( this.update_url, {}, (download,status)=>{ //安装到手机的目录
					if ( status == 200 ) { 
						plus.runtime.install(download.filename);  // 安装下载的apk文件
					} else {
						plus.nativeUI.closeWaiting();
						uni.showToast({
							title:'下载更新失败！',
							icon: 'none'
						})
					}
				});
				task.addEventListener("statechanged", (download, status) => {
					console.log(download.totalSize)
					switch (download.state) {
						case 2:
							plus.nativeUI.showWaiting("正在下载,请不要离开此页面...");
							break;
						case 3:
							//进度条百分比 totalSize为总量，baifen为当前下载的百分比
							if(this.totalSize==0){
								this.totalSize=parseInt(download.totalSize);
							}
							if(parseInt(download.downloadedSize/this.totalSize*100)!=this.baifen){
								this.baifen=parseInt(download.downloadedSize/this.totalSize*100);
							}							
							break;
						case 4:
							plus.nativeUI.closeWaiting();
							uni.showToast({
								title:'下载完成',
							})
							uni.clearStorage();
							this.clearCache()
							break;
					}
				});
				task.start();
			},
			closeUpdate(){
				this.showUpdate = false
				uni.showTabBar()
			},
			// 清理缓存
			clearCache() {    
				let os = plus.os.name;  
				if (os == 'Android') {  
					let main = plus.android.runtimeMainActivity();  
					let sdRoot = main.getCacheDir();  
					let files = plus.android.invoke(sdRoot, "listFiles");  
					let len = files.length;  
					for (let i = 0; i < len; i++) {  
						let filePath = '' + files[i]; // 没有找到合适的方法获取路径，这样写可以转成文件路径  
						plus.io.resolveLocalFileSystemURL(filePath, (entry)=> {  
							if (entry.isDirectory) {  
								entry.removeRecursively((entry)=> { //递归删除其下的所有文件及子目录  
										this.formatSize(); // 重新计算缓存  
								}, (e)=> {    
									uni.showToast({
										title:e.message,
										icon:'none'
									})
								});  
							} else {  
									entry.remove();  
							}  
						}, (e)=> {  
							uni.showToast({
								title:'文件路径读取失败',
								icon:'none'
							}) 
						});  
					} 
				} else { // ios  
					plus.cache.clear(()=> {  
						this.formatSize();  
					});  
				}  
			},
			// 计算缓存
			formatSize() {    
				plus.cache.calculate((size) => {  
					let sizeCache = parseInt(size);  
					if (sizeCache == 0) {  
							this.fileSizeString = "0B";  
					} else if (sizeCache < 1024) {  
							this.fileSizeString = sizeCache + "B";  
					} else if (sizeCache < 1048576) {  
							this.fileSizeString = (sizeCache / 1024).toFixed(2) + "KB";  
					} else if (sizeCache < 1073741824) {  
							this.fileSizeString = (sizeCache / 1048576).toFixed(2) + "MB";  
					} else {  
							this.fileSizeString = (sizeCache / 1073741824).toFixed(2) + "GB";  
					}  
				});  
			},
			goSearch(){
				uni.navigateTo({
					url:'../../subPages/HM-search/HM-search'
				})
			},
			getGoodsList(){
				unencryp('/snap/getSnapUpList','get',{}).then(res => {
					if(res.code == 200){
						setTimeout(()=>{
							this.goodsList = res.data.contentList
							this.bannerList = res.data.topList
						},0)
						setTimeout(()=>{
								// 模拟网路请求
								this.loadingStatus = true
								this.refreshing = false
								this.loading = false;
								this.release = false
								this.refreshText = '下拉可以刷新'
						},1200)
					}else{
						res.msg || uni.showToast(res.msg)
					}
				})
			},
			onrefresh(){
				if(this.loading){
						//当正在调用接口获取数据时，此时的下拉不做任何操作
						return;
				}
				this.loading = true;
				this.refreshing = true
				this.loadingStatus = false
				this.refreshText = '加载中 ...'
				this.getGoodsList()
			},
			onpullingdown(e){
				if (this.refreshing) return;
				if(e.pullingDistance >= 150){
					this.release = true
					this.refreshText = '释放立即刷新'
				}else{
					this.refreshText = '下拉可以刷新'
					this.release = false
				}
			},
			goWatchMorePage(nums){
				uni.navigateTo({
					url:'../../subPages/watchMore/watchMore?type=' + nums
				})
			},
			barClick(data,index){
				switch (index){
					case 0:
						uni.navigateTo({
							url:'../../subPages/myOrder/myOrder'
						})
						break;
					case 1:
						uni.navigateTo({
							url:'../../subPages/goodsPublicPage/goodsPublicPage?type=0'
						})
						break;
					case 2:
						uni.navigateTo({
							url:'../../subPages/goodsPublicPage/goodsPublicPage?type=1'
						})
						break;
					case 3:
						uni.navigateTo({
							url:'../../subPages/ptReward/ptReward'
						})
						break;
				}
			},
			cardClick(item){
				uni.navigateTo({
					url:'../../subPages/goodsDetail/goodsDetail?groupType=' + item.snapUpPeopleMax + '&id=' + item.id
				})
			},
			getCheckVersion(){
				let param = {
					"clientName": "android",
					"version": this.version
				}
				request('/api/checkVersion','post',param).then(res => {
					// 这里需要返回app下载链接
					if(res.code == 200){
						if( this.version == res.data.version ){return}
						setTimeout(()=>{
							let downloadTxt = '';
							this.update_des = []  
							this.update_url = res.data.downloadLink
							this.showUpdate = true
							this.$nextTick(()=>{
								setTimeout(()=>{
									let theNode = uni.createSelectorQuery().select(`#progressBox`)
									theNode.boundingClientRect((data)=>{
										this.updateBoxWidth = data.width
									}).exec()
								},10)
							})
							
							uni.hideTabBar()
						},0)
					}else{
						uni.showToast({
							title:res.msg,
							icon:'none'
						})
					}
				})
			},
			goDetail(data,index){
				data.bigImg = data.topContentImg
				var strRegex = "((http[s]{0,1}|ftp)://[a-zA-Z0-9\\.\\-]+\\.([a-zA-Z]{2,4})(:\\d+)?(/[a-zA-Z0-9\\.\\-~!@#$%^&*+?:_/=<>]*)?)|(www.[a-zA-Z0-9\\.\\-]+\\.([a-zA-Z]{2,4})(:\\d+)?(/[a-zA-Z0-9\\.\\-~!@#$%^&*+?:_/=<>]*)?)";
				let re=new RegExp(strRegex);
				if (!re.test(data.topContentImg)) {
					uni.showToast({
						title: '详情页地址有误,请联系客服',
						icon: 'none'
					})
					return
				}
				uni.navigateTo({
					url:'../../subPages/details/details?param='+ encodeURIComponent(JSON.stringify(data)) + '&type=swiper&index='+index + '&from=easyEarn'
				})
			},
			moveHandle(){
				return
			},
		}
	}
</script>

<style scoped>
.header {    
	background-color: #2C405A;
	width: 750upx;    
	position: fixed;    
	top: 0;    
	z-index: 1;
}    
.info {  
	color: #fff;
	width: 750upx; 
	height: 44px;    
	position: relative;
} 
.navTitleTxt{
	color: #fff;
	font-size: 34rpx;
}
.iconBox{
	position: absolute;
	top: 0;
	bottom: 0;
	right: 26rpx;
	padding-left: 60rpx;
}
.search{
	margin-bottom: 10rpx;
}
.swiper{
	height: 250rpx;
}
.swiperImg{
	width: 750rpx;
	height: 300rpx;
}
.bar{
	padding: 30rpx 0;
	border-radius: 10rpx;
	margin: 0 0 20rpx;
	border-radius: 0;
	background-color: #fff;
}
.img{
	width: 98rpx;
	height: 82rpx;
	margin-bottom: 20rpx;
}
.listsWrap{
	margin-bottom: 20rpx;
	background-color: #f6f6f6;
}
.listTit{
	width: 750rpx;
	height: 80rpx;
	position: sticky;
	top: 0;
	z-index: 9;
	border-bottom-width: 1rpx;
	border-style: solid;
	border-color: #f6f6f6;
}
.titWrap{
	width: 750rpx;
	height: 80rpx;
	padding-left: 20rpx;
	background-color: #fff;
}
.label{
	font-size: 28rpx;
	font-weight: bold;
}
.line{
	font-size: 22rpx;
	margin: 0 10rpx;
	color: #666;
}
.nums{
	color: #666;
	font-size: 26rpx;
}
.more{
	color: #666;
	font-size: 28rpx;
	line-height: 26rpx;
}
.emptyBox{
	height: 20rpx;
}
.cardWrap{
	padding: 0 20rpx;
	background-color: #fff;
}
.updateBox{
	position: fixed;
	left: 0;
	top: 0;
	right: 0;
	bottom: 0;
	background-color: rgba(0, 0, 0, 0.3);
	z-index: 10;
}
.text{
	color: #fff;
}

.updateBg{
	width: 580rpx;
	height: 734rpx;
}
.main{
	position: absolute;
	top: 330rpx;
	left: 0;
	right: 0;
	bottom: 0;
	z-index: 99;
	padding: 20rpx;
	background-color: #fff;   
}
.title{
	color: #000;
	font-size: 32rpx;
	margin-bottom: 20rpx;
}
.item{
	color: #666;
	font-size: 28rpx;
}

.dialog{
	position: fixed;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	z-index: 9999;
	background-color: rgba(0,0,0,0.4);
}
.updateConBox{
	width: 560rpx;
	border-radius: 20rpx;
	padding: 20rpx 0 0;
	background-color: #fff;
}
.title{
	height: 40rpx;
	margin-top: 20rpx;
}
.updateCon{
	padding: 0 20rpx;
}
.updateTxt{
	color: #666;
	font-size: 28rpx;
}
.progress-box{
	width: 520rpx;
	height: 12rpx;
	margin-top: 30rpx;
	margin-left: 20rpx;
	border-radius: 6rpx;
	background-color: #b8b8b8;
}
.progress{
	height: 12rpx;
	border-radius: 6rpx;
	background-color: #2C405A;
}
.updateBtns{
	width: 560rpx;
	height: 80rpx;
	margin-top: 30rpx;
	border-top-width: 1rpx;
	border-style: solid;
	border-color: #f3f3f3;
}
.cancelbtn{
	border-right-width: 1rpx;
	border-style: solid;
	border-color: #f3f3f3;
}
.btnTxt{
	color: #007AFF;
	font-size: 30rpx;
	line-height: 28rpx;
}
</style>
