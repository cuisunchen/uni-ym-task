<template>
	<list class="lists flex1" show-scrollbar="false" @loadmore="loadMore(0)">
		<refresh class="row fresh all-center" @refresh="onrefresh" @pullingdown="onpullingdown" :display="refreshing?'show':'hide'">
			<image class="loadingImg" v-if="!loadingStatus" src="../../../static/loading.gif" mode=""></image>
			<view class="loadingIco row align-center"> 
				<uni-icons class="uni-icons" v-if="loadingStatus" :class="{'refreshRotate': release}" type="pulldown" size="24" color="#999"></uni-icons>
				<view class="freshWrap flex-column all-center">
					<text class="freshTit">{{refreshText}}</text>
					<!-- <text class="freshTime">最后更新: 今天15:39</text> -->
				</view>
			</view>
		</refresh>
		<cell v-for="(item,index) in lists" :key="index" class="cell" @click="cardClick(2,item)">
			<goods-card class="goodsCard" :data-obj="item"></goods-card>
		</cell>
		<cell v-if="isNoMore && lists.length > 5">
			<text class="botLine">------ 我也是有底线的哦 !!! -------</text>
		</cell>
		<cell class="nodata flex1 flex-column all-center" v-if="lists.length == 0">
			<image class="nodataimg" src="../../../static/noData.png" mode="scaleToFill"></image>
			<text class="nodatadesc">暂无数据</text>
		</cell>
	</list>
</template>

<script>
	import goodsCard from '@/components/goods-card/goods-card.nvue'
	import {unencryp,request} from "../../../common/utils/request.js"
	export default {
		components:{goodsCard},
		props:{
			tabIndex:{
				type: Number
			}
		},
		data(){
			return{
				loadingStatus: true,   //  控制雪花动画是否显示
				refreshing:false,				//  控制refresh是否显示
				refreshText: "下拉可以刷新",
				loading:false,
				param:{
					"pageNum": 1,
					"pageSize": 10,
					"type": 2
				},
				lists:[],
				isNoMore: false,			// 控制是否可以加载更多
			}
		},
		watch:{
			tabIndex(val){
				if(val == 0){
					let isInitPT2 = uni.getStorageSync('isInitPT2')
					if(isInitPT2){return}
					uni.setStorage({
						key:'isInitPT2',
						data: true
					})
					uni.showLoading({
						title:'加载中 ...'
					})
					this.getLists()
				}
			}
		},
		methods:{
			getLists(type){
				request('/snap/getSnapUpListByType','post',this.param).then(res=>{
					uni.hideLoading()
					if(res.code == 200){
						setTimeout(()=> {
							if(this.param.pageNum >= Math.ceil(res.data.maxSize/this.param.pageSize)){
								this.isNoMore = true
							}
							if(type && type == 'loadMore'){
								this.lists.push(...res.data.list)
							}else{
								this.lists = res.data.list
							}
						}, 0);
						if(type == 'refresh'){
							setTimeout(()=>{
								this.loadingStatus = true
								this.refreshing = false
								this.loading = false;
								this.release = false
								this.refreshText = '下拉可以刷新'
							},1200)
						}
					}
				})
			},
			onrefresh(){
				if(this.loading){
						//当正在调用接口获取数据时，此时的下拉不做任何操作
						return;
				}
				this.param.pageNum = 1
				this.isNoMore = false
				this.loading = true;
				this.refreshing = true
				this.loadingStatus = false
				this.refreshText = '加载中 ...'
				this.getLists('refresh')
			},
			onpullingdown(e){
				if (this.refreshing) return;
				if(e.pullingDistance >= 150){
					this.release = true
					this.refreshText = '释放立即刷新'
				}else{
					this.refreshText = '下拉可以刷新'
					this.release = false
				}
			},
			loadMore(){
				if(this.isNoMore){
					return
				}
				this.param.pageNum ++
				this.getLists('loadMore')
			},
			cardClick(type,item){
				uni.navigateTo({
					url: '../goodsDetail/goodsDetail?groupType=' + type + '&id=' + item.id
				})
			}
		}
	}
</script>

<style scoped>
.cell{
	padding: 0 20rpx;
	background-color: #fff;
}
.goodsCard{
	border-bottom-width: 0;
	border-top-width: 1rpx;
	border-style: solid;
	border-color: #f6f6f6;
}
</style>
