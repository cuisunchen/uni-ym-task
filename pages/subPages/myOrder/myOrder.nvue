<template>
	<view class="myOrderPage flex1 flex-column">
		<header class="tabs row">
			<view class="tabBox row all-center" v-for="(tab,index) in tabList" :key="index" @click="tabChange(index,tab.id)">
				<text class="tab" :class="{active:tabIndex == index}" :id="tab.id">{{tab.name}}</text>
			</view>
			<view class="underLine" :style="{left: lineLeft + 'px'}"></view>
		</header>
		<swiper class="flex1 swiper" :current="tabIndex" :indicator-dots="false" :autoplay="false">
			<!-- 待发货 -->
			<swiper-item>
				<send-goods-card :lists="lists1" @refresh="onRefresh" @loadMore="loadMore"></send-goods-card>
			</swiper-item>
			<!-- 待收货 -->
			<swiper-item>
				<get-goods-card :lists="lists2" @refresh="onRefresh" @loadMore="loadMore"></get-goods-card>
			</swiper-item>
		</swiper>
	</view>
</template>

<script>
	import sendGoodsCard from './send-good-card.nvue'
	import getGoodsCard from './get-goods-card.nvue'
	import {unencryp} from '../../../common/utils/request.js'
	export default {
		components:{sendGoodsCard,getGoodsCard},
		data() {
			return {
				lineWidth:null,
				tabList: [
					{
						name:'待发货',
						id:'tab0',
						index:0
					},
					{
						name:'待收货',
						id:'tab1',
						index:1
					}
				],
				lineLeft: '0',
				tabIndex: 0,
				param1:{
					"pageNum": 1,
					"pageSize": 10,
					"type": 0
				},
				param2:{
					"pageNum": 1,
					"pageSize": 10,
					"type": 1
				},
				lists1:[],
				lists2:[],
				maxPageNum1: null,
				maxPageNum2: null
			}
		},
		onNavigationBarButtonTap() {
			uni.navigateTo({
				url:'../refundRecord/refundRecord'
			})
		},
		mounted() {
			this.$nextTick(() => {
				let theNode = uni.createSelectorQuery().select(`#tab0`)
				theNode.boundingClientRect((data)=>{
					this.lineLeft = data.left + 2
					this.lineWidth = data.width - 20
				}).exec()
			})
			uni.showLoading({
				title:'数据加载中...'
			})
			this.getLists()
		},
		methods: {
			getLists(type){
				unencryp('/snap/getDeliveryList','post',this.tabIndex == 0 ? this.param1 : this.param2).then(res=>{
					if(res.code == 200){ 
						setTimeout(()=> {
							if(this.tabIndex == 0){
								if(type && type == 'loadMore'){
									console.log(type)
									this.lists1.push(res.data.list)
								}else{
									if(res.data.maxSize == this.param1.pageNum){
										this.maxPageNum1 = res.data.maxSize
									}
									this.lists1 = res.data.list
								}
							}else{
								if(type && type == 'loadMore'){
									this.lists2 = res.data.list
								}else{
									if(res.data.maxSize == this.param2.pageNum){
										this.maxPageNum2 = res.data.maxSize
									}
									this.lists2 = res.data.list
								}
							}
						}, 0);
					}else{
						res.msg || uni.showToast(res.msg)
					}
				})
			},
			onRefresh(){
				if(this.tabIndex == 0){
					this.param1.pageNum = 1
				}else{
					this.param2.pageNum = 1 
				}
				this.getLists()
			},
			loadMore(){
				if(this.tabIndex == 0){
					if(this.param1.pageNum >= this.maxPageNum1){
						return
					}
					this.param1.pageNum ++ 
				}else{
					if(this.param2.pageNum >= this.maxPageNum2){
						return
					}
					this.param2.pageNum ++ 
				}
				this.getLists('loadMore')
			},
			tabClick(item){
				this.tabIndex = item.index
			},
			tabChange(index,id){ 
				this.tabIndex = index
				let theNode=uni.createSelectorQuery().select(`#${id}`)
				theNode.boundingClientRect((data)=>{
					this.lineLeft = data.left
				}).exec()
				this.getLists()
			},
		}
	}
</script>

<style scoped>
.tabs{
	height: 80rpx;
	padding: 0 20rpx;
	background-color: #fff;
	position: relative;
}
.tabBox{
	height: 80rpx;
	padding: 0 20rpx;
}
.tab{
	color: #666;
	font-size: 28rpx;
	text-align: center;
}
.active{
	color: #000;
}
.underLine{
	width: 80rpx;
	height: 6rpx;
	background-color: #000;
	position: absolute;
	left: 23rpx;
	bottom: 0;
	transition-property: left;
	transition-duration:.3s;
	transition-timing-function:ease
}
</style>
