<template>
	<view class="myMessage flex1 flex-column">
		<list class="lists flex1" show-scrollbar="false" loadmoreoffset="10" @loadmore="loadMore">
			<refresh class="row fresh all-center" @refresh="onrefresh" @pullingdown="onpullingdown" :display="refreshing?'show':'hide'">
				<image class="loadingImg" v-if="!loadingStatus" src="../../../static/loading.gif" mode=""></image>
				<view class="loadingIco row align-center"> 
					<uni-icons class="uni-icons" v-if="loadingStatus" :class="{'refreshRotate': release}" type="pulldown" size="24" color="#999"></uni-icons>
					<text class="freshTit">{{refreshText}}</text>
				</view>
			</refresh>
			<cell v-for="(item,index) in lists" :key="index" class="cell">
				<message-card class="card" :data-obj="item"></message-card>
			</cell>
			<cell v-if="isNoMore && lists.length > 5">
				<text class="botLine">------ 我也是有底线的哦 !!! -------</text>
			</cell>
			<cell class="nodata flex1 flex-column all-center" v-if="lists.length == 0">
				<image class="nodataimg" src="../../../static/noData.png" mode="scaleToFill"></image>
				<text class="nodatadesc">暂无数据</text>
			</cell> 
		</list>
	</view>
</template>

<script>
	import messageCard from '@/components/message-card/message-card-user.nvue'
	import {request} from '../../../common/utils/request.js'
	export default {
		components:{messageCard},
		data(){
			return{
				loadingStatus: true,   //  控制雪花动画是否显示
				refreshing:false,				//  控制refresh是否显示
				refreshText: "下拉可以刷新",
				loading:false,
				isNoMore: false,			// 控制是否可以加载更多
				param:{
					"pageNum": 1,
					"pageSize": 10
				},
				lists:[]
			}
		},
		created() {
			this.getLists()
		},
		methods:{
			getLists(type){
				request('/api/userMessage','post',this.param).then(res => {
					uni.hideLoading()
					if(res.code == 200){
						console.log(res)
						setTimeout(()=>{
							if(this.param.pageNum >= Math.ceil(res.data.maxSize/this.param.pageSize)){
								this.isNoMore = true
							}
							if(type && type == 'loadMore'){
								this.lists.push(...res.data)
							}else{
								this.lists = res.data
							}
						},0)
						if(type == 'refresh'){
							setTimeout(()=>{
								this.loadingStatus = true
								this.refreshing = false
								this.loading = false;
								this.release = false
								this.refreshText = '下拉可以刷新'
							},1200)
						}
					}else{
						uni.showToast({
							title:res.msg,
							icon:'none'
						})
					}
				})
			},
			onrefresh(){
				if(this.loading){
						//当正在调用接口获取数据时，此时的下拉不做任何操作
						return;
				}
				this.param.pageNum = 1
				this.isNoMore = false
				this.loading = true;
				this.refreshing = true
				this.loadingStatus = false
				this.refreshText = '加载中 ...'
				this.getLists('refresh')
			},
			onpullingdown(e){
				if (this.refreshing) return;
				if(e.pullingDistance >= 150){
					this.release = true
					this.refreshText = '释放立即刷新'
				}else{
					this.refreshText = '下拉可以刷新'
					this.release = false
				}
			},
			loadMore(){
				if(this.isNoMore){
					return
				}
				this.param.pageNum ++ 
				this.getLists('loadMore')
			},
		}
	}
</script>

<style scoped>
	.myMessage{
		padding: 20rpx;
	}
.lists{
	/* width: 750rpx; */
}
.card{
	margin-bottom: 20rpx;
	border-radius: 8rpx;
}
</style>
